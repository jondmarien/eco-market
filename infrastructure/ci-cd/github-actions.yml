name: EcoMarket CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ecomarket

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [user-service, product-service, order-service, payment-service]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js (for Node services)
      if: matrix.service == 'user-service' || matrix.service == 'payment-service'
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: services/${{ matrix.service }}/package-lock.json

    - name: Setup Python (for Python services)
      if: matrix.service == 'product-service'
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Setup Go (for Go services)
      if: matrix.service == 'order-service'
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Install dependencies (Node.js)
      if: matrix.service == 'user-service' || matrix.service == 'payment-service'
      working-directory: services/${{ matrix.service }}
      run: npm ci

    - name: Install dependencies (Python)
      if: matrix.service == 'product-service'
      working-directory: services/${{ matrix.service }}
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio

    - name: Install dependencies (Go)
      if: matrix.service == 'order-service'
      working-directory: services/${{ matrix.service }}
      run: go mod download

    - name: Run tests (Node.js)
      if: matrix.service == 'user-service' || matrix.service == 'payment-service'
      working-directory: services/${{ matrix.service }}
      run: npm test

    - name: Run tests (Python)
      if: matrix.service == 'product-service'
      working-directory: services/${{ matrix.service }}
      run: pytest

    - name: Run tests (Go)
      if: matrix.service == 'order-service'
      working-directory: services/${{ matrix.service }}
      run: go test ./...

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  build-and-push:
    name: Build and Push Images
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: github.ref == 'refs/heads/main'
    strategy:
      matrix:
        service: [user-service, product-service, order-service, payment-service]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: services/${{ matrix.service }}
        file: services/${{ matrix.service }}/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBE_CONFIG_STAGING }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig

    - name: Deploy to staging
      run: |
        kubectl apply -f infrastructure/k8s/namespace.yml
        kubectl apply -f infrastructure/k8s/services/
        kubectl rollout restart deployment -n ecomarket-staging

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig

    - name: Deploy to production
      run: |
        kubectl apply -f infrastructure/k8s/namespace.yml
        kubectl apply -f infrastructure/k8s/services/
        kubectl apply -f infrastructure/api-gateway/kong-deployment.yml
        kubectl rollout restart deployment -n ecomarket

    - name: Run smoke tests
      run: |
        # Wait for deployments to be ready
        kubectl wait --for=condition=available --timeout=300s deployment --all -n ecomarket
        
        # Run basic health checks
        kubectl run smoke-test --image=curlimages/curl --rm -it --restart=Never -- \
          curl -f http://kong-gateway-service.ecomarket/api/v1/health

  frontend-deploy:
    name: Deploy Frontend Applications
    runs-on: ubuntu-latest
    needs: deploy-production
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Build Customer Web App
      working-directory: apps/customer-web-app
      run: |
        npm ci
        npm run build
        
    - name: Build Admin Dashboard
      working-directory: apps/admin-dashboard
      run: |
        npm ci
        npm run build

    - name: Deploy to CDN
      run: |
        # Deploy customer web app
        aws s3 sync apps/customer-web-app/build/ s3://${{ secrets.CUSTOMER_APP_BUCKET }}/ --delete
        aws cloudfront create-invalidation --distribution-id ${{ secrets.CUSTOMER_APP_CLOUDFRONT_ID }} --paths "/*"
        
        # Deploy admin dashboard
        aws s3 sync apps/admin-dashboard/build/ s3://${{ secrets.ADMIN_APP_BUCKET }}/ --delete
        aws cloudfront create-invalidation --distribution-id ${{ secrets.ADMIN_APP_CLOUDFRONT_ID }} --paths "/*"
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: us-east-1
