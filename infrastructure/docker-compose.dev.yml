version: '3.8'

services:
  # Databases
  postgres:
    image: postgres:15-alpine
    container_name: ecomarket-postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ../product-catalog-service/init.sql:/docker-entrypoint-initdb.d/01-product-catalog.sql
      - ../services/order-service/init.sql:/docker-entrypoint-initdb.d/02-order-service.sql
    networks:
      - ecomarket-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # Additional PostgreSQL for Orders (if needed as separate instance)
  postgres-orders:
    image: postgres:15-alpine
    container_name: ecomarket-postgres-orders
    environment:
      POSTGRES_DB: orders_db
      POSTGRES_USER: orders_user
      POSTGRES_PASSWORD: orders_password
    volumes:
      - orders_postgres_data:/var/lib/postgresql/data
      - ../services/order-service/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5434:5432"
    networks:
      - ecomarket-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U orders_user -d orders_db"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: ecomarket-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - ecomarket-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    command: redis-server --appendonly yes
    restart: unless-stopped

  # Additional Redis for Orders (if needed as separate instance)
  redis-orders:
    image: redis:7-alpine
    container_name: ecomarket-redis-orders
    ports:
      - "6380:6379"
    volumes:
      - orders_redis_data:/data
    networks:
      - ecomarket-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    command: redis-server --appendonly yes
    restart: unless-stopped

  mongodb:
    image: mongo:6
    container_name: ecomarket-mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    networks:
      - ecomarket-network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # Services
  user-service:
    build:
      context: ../services/user-service
      dockerfile: Dockerfile
    container_name: ecomarket-user-service
    environment:
      - NODE_ENV=development
      - PORT=${USER_SERVICE_PORT}
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - REDIS_URL=${REDIS_URL}
    ports:
      - "${USER_SERVICE_PORT}:${USER_SERVICE_PORT}"
    networks:
      - ecomarket-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ../services/user-service:/app
      - /app/node_modules
    command: npm run dev

  product-catalog:
    build:
      context: ../product-catalog-service
      dockerfile: Dockerfile
    container_name: product-catalog-service
    environment:
      POSTGRES_SERVER: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: product_catalog
      POSTGRES_USER: ecomarket
      POSTGRES_PASSWORD: password
    ports:
      - "8000:8000"
    networks:
      - ecomarket-network
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ../product-catalog-service/app:/app/app
    restart: unless-stopped

  order-service:
    build:
      context: ../services/order-service
      dockerfile: Dockerfile
    container_name: ecomarket-order-service
    environment:
      - PORT=8080
      - POSTGRESQL_URL=postgres://orders_user:orders_password@postgres-orders:5432/orders_db?sslmode=disable
      - REDIS_URL=redis://redis-orders:6379
      - ENVIRONMENT=development
    ports:
      - "8003:8080"
    networks:
      - ecomarket-network
    depends_on:
      - postgres-orders
      - redis-orders
    restart: unless-stopped

  payment-service:
    build:
      context: ../services/payment-service
      dockerfile: Dockerfile
    container_name: ecomarket-payment-service
    environment:
      - NODE_ENV=development
      - PORT=7000
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - REDIS_URL=${REDIS_URL}
    ports:
      - "7000:7000"
    networks:
      - ecomarket-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ../services/payment-service:/app
      - /app/node_modules

  inventory-service:
    build:
      context: ../inventory-service
      dockerfile: Dockerfile
    container_name: ecomarket-inventory-service
    environment:
      - NODE_ENV=development
      - PORT=8005
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - REDIS_URL=${REDIS_URL}
    ports:
      - "8005:8005"
    networks:
      - ecomarket-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ../inventory-service:/app
      - /app/node_modules

  analytics-service:
    build:
      context: ../services/analytics-service
      dockerfile: Dockerfile
    container_name: ecomarket-analytics-service
    environment:
      - FLASK_ENV=development
      - PORT=9000
      - MONGODB_URI=mongodb://${MONGO_INITDB_ROOT_USERNAME}:${MONGO_INITDB_ROOT_PASSWORD}@mongodb:27017
      - REDIS_URL=${REDIS_URL}
    ports:
      - "9000:9000"
    networks:
      - ecomarket-network
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ../services/analytics-service:/app

  notification-service:
    build:
      context: ../services/notification-service
      dockerfile: Dockerfile
    container_name: ecomarket-notification-service
    environment:
      - FLASK_ENV=development
      - PORT=9001
      - REDIS_URL=${REDIS_URL}
    ports:
      - "9001:9001"
    networks:
      - ecomarket-network
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - ../services/notification-service:/app

  # Redis Commander for debugging orders
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: ecomarket-redis-commander
    environment:
      - REDIS_HOSTS=redis-orders:redis-orders:6379
    ports:
      - "8082:8081"
    networks:
      - ecomarket-network
    depends_on:
      - redis-orders
    restart: unless-stopped

  # pgAdmin for database management
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: ecomarket-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@ecomarket.dev
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_LISTEN_PORT: 80
    ports:
      - "8080:80"
    networks:
      - ecomarket-network
    depends_on:
      - postgres
      - postgres-orders
    restart: unless-stopped

  # API Gateway
  kong:
    image: kong:3.4
    container_name: ecomarket-kong
    environment:
      KONG_DATABASE: ${KONG_DATABASE}
      KONG_DECLARATIVE_CONFIG: ${KONG_DECLARATIVE_CONFIG}
      KONG_ADMIN_LISTEN: ${KONG_ADMIN_LISTEN}
      KONG_PROXY_LISTEN: ${KONG_PROXY_LISTEN}
      KONG_LOG_LEVEL: info
    ports:
      - "8090:8000"  # Proxy (changed to avoid conflict with pgAdmin)
      - "8001:8001"  # Admin API
    volumes:
      - ./api-gateway:/kong/declarative
    networks:
      - ecomarket-network
    depends_on:
      - user-service
      - product-catalog
      - order-service
      - payment-service

volumes:
  postgres_data:
  redis_data:
  mongodb_data:
  orders_postgres_data:
  orders_redis_data:

networks:
  ecomarket-network:
    driver: bridge
